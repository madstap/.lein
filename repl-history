(#())
(macroexpand #()
)
(defn f [n]
  (apply *' (range 1 (inc n))))
(f 52)
(f (f (f 2)))
(f 4)
(f (f 4))
(f (f 3))
(f (f 2))
(f (f (f (f (f 2)))))
(f 52)
(f 6)
(f 3)
(* 1 2 3)
(*' 2 3)
(*' 2 3 4)
(def {:a 1 :b 2 :c 3 :d 4})
(def a {:a 1 :b 2 :c 3 :d 4})
(a)
(a :a)
(a :d)
(a a)
(a a a)
(a a a a)
(a :d)
(:d a)
(:c a)
(:q a)
(a :q)
(a)
(a a)
(a a a)
("asdasdasd")
"asdasd"
(clojure.string/uppercase "asd")
(clojure.core
)
(f 52)
(f 7)
(loop [a 0]
  (println (f a)
  (if (= a 52)
    0
    (recur (inc a))))
(loop [a 0]
  (println (f a))
  (if (= a 52)
    0
    (recur (inc a))))
(fn [n] (reduce *' (range 1 (inc n))))
(def fac *1)
(f 52)
(f (f (f 2)))
(defn s [n]
  (reduce +' (range 1 (inc n))))
(s 10)
(s 20)
(s 100)
(s 1000)
(s 10000)
(s 10)
(s 100000)
(s 1000000)
(s (s (s 10)))
(s 10)
(f (s 10))
(f 10)
(s (f 10)
)
(f (s 10))
(f 52)
(s (f 52))
(f 52)
(s (f 10))
(time (s (f 10)))
(time (f 52))
()
'() '() '() '() '() '()
(f 10)
(s 100)
(s 1000)
(s 10000)
(s 100000)
(s 1000000)
(s 10000000)
(time (1000)
)
(time 1)
(time (s 100))
(time (f 100))
()
((fn [] 1))
(#(1))
()
'()
"()"
'()
'() '() '()
'(1 2 3 4_
)
'(1 2 3 4 5 6 7 8 9 10)
(reduce *' *1)
(apply *' (range 1 11))
(*' 1 2 3 4 5 6 7 8 9 10)
()
'() '() '()
['() '() '() '()]
'('() '() '() '())
'9
(identity '9)
(identity 9)
(identity itentity)
'identity
(*1 *1(
)
(identity identity)
(identity f)
(identity q)
(identity 'q)
(identity)
(identity 9)
(identity 'f)
(*1 52)
('f 52)
(f 52)
(f 4)
(f (f 4))
(f 1)
(f -1_
_
)
(f -1_
)
(f -2)
(f (f 0))
(reduce *' 1)
(range 0)
(reduce *' ())
8
*
(*)
(+)
(-)
(/)
(=)
(= 1 1 1 1 1 1 1)
(- 1 1 1 1)
(= true)
(= true true true)
(* true)
(true true)
(*)
(+)
(+ (*) (*) (*))
('() '() '[])
'()
'[]
'('() '() '() '())
'() '() '() '() '() '() '() '()
'() '() '() '() '() '() '()
'(f 52)
*1
(eval *1)
(f 8)
(def f #(reduce *' (range 1 (inc n))))
(def f #(reduce *' (range 1 (inc %))))
(f 52)
(f 4)
(f (f 4))
(f 5)
(f (f 5))
'f
((eval *1) 52)
('f)
(('f) 52)
'f
's
'a
((eval 'f) 52)
(
)
(defn f [n]
(reduce
*' (range 1 (inc n))))
(f 52)
(class "sa")
(class 1/2)
(class 2)
(class 2N)
(class 900000000000000000000000000000000000000000000000000000000000000000)
(is true)
(deftest a
(testing "sad"
(is (= 1 1))))
(. System exit 0)
(defn f [n]
  (reduce *' (range 1 (inc n))))
(f 52)
(f 4)
(f (f 4))
(defn f [n]
  (reduce *' (range 1 (inc n))))
(f 52)
(f (f 3))
(def #(reduce *' (range 1 (inc %))))
(def f #(reduce *' (range 1 (inc %))))
(f 52)
(range 1 (inc 10))
(range 1 10)
(into {} (range 1 10))
(into [] (range 1 10))
(into #{} (range 1 11))
*1
(into #{} (range 11)
)
(into #{} #{1 2 3 4 5})
(into #{} (range 11))
(conj [] 1)
(apply (partial (conj [])) (range 10))
((partial (* 9) 9)
)
(range 100)
(map inc (range 100))
(into #{} (map inc (range 100)))
((partial *) 9)
(partial * 100) 9)
((partial * 100) 9)
((partial * 1000) 9)
((partial * 100) 100)
(* 100 100)
(*' 100 100)
(* 100 100 100 100 100 100 100 100)
()
'() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()
'(1 2 3 4 5)
'('(1 2 3 4 5) '(1 2 3 4 5))
'(1 2 3 4 5)
'()
'() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()
'('() '() '() '() '() '() '() '() '() '() '() '() '() '() '())
(loop [a 0]
  (println a)
  (if (= a 10)
    a))
(loop [a 0]
  (if (= a 10)
    a
    (do
      (println a)
      (recur (inc a)))))
((fn [n]
  (if (= n 10)
    n
    (do
      (println n)
      (recur (inc n))))) 0)
(fn [n] (* n n))
(*1 10)
(fn [n] (* n n))
(partial *)
(*1)
*1
(range 11)
(map inc (range 10))
(*')
(+)
(+')
(+ (+) (+)
)
(+ (*) (*) (*) (*) (*) (*))
(*)
(*')
(* (*) (*) (*) (*))
(*' (+ (*) (*)))
(*' (+ (*) (*)) 2)
(*')
(+ (*) (*) (*) (*))
(defmacro a [] 2)
s
(a)
'() '() '() '() '() '() '()
(into "" "sa")
(#(* % % % % % % %) 10)
(#(* % % % % % % %) 1000)
(#(*' % % % % % % %) 1000)
((#(%) *') 10 10 10 10 10)
(*' 10 10 10 10 10 10 10)
((partial into #{}) 1 2 3 4 3 4 3 2 1)
((partial into #{}) (range 10))
(set (range 10)
)
(into '() (set (range 10)))
(into '() (set (range 9)))
(into '() (set (range 10)))
#{} 3
(#{} 3)
(#{} #{})
(conj #{} 1 2 3 4 5)
(conj *1 6)
(#(* % %) 5)
(#())
#()
(#())
'(#())
~()
'(~())
'(~(#()))
#()
(#())
'(#())
'(#(%))
'(#(partial %))
'(#())
'(#{})
'(#(% %))
'(#(* % %))
'(#(%))
'(#(%) *)
'(#())
'(#(%))
'(#(* % %) ~(+ 1 1))
'#())
'#()
'(#())
'#()
'#(%)
'#()
'#{}
'#()
'#(% %2)
'#()
'#(% %)
'#()
'#(into #{} (range 1 10))
(eval *1)
((eval *2))
(map inc (range 100))
(set (map inc (range 100)))
'#()
'(%)
'#(%)
'#(%1 %2 %3 %4 %5)
'(def a #(range %))
a
(eval *2)
a
(a 10)
(range 100)
(into #{} (map inc (range 100)))
'()
'() '() '() '() '() '()
'() '() '() '() '() '() '() '() '() '() '() '() '() '() '() '()
'(range 10)
(*1)
'(range 10)
(= *1)
(= (range 10) (range 10))
(= #{1 2 3} #{1 2 3})
(= #{1 2 3} #{1 3 2})
(= (set (range 10)) (set (range 10)))
(set (range 10))
(set 10)
(set [10)
(set [10])
(conj (set [10]) 1 2 3 4)
(conj *1 1 2 5 6 0 7 8 9)
#{(+ 1 2) 2 2}
(conj #{1 2 3 4} 10)
'#()
~#()
#()
'#()
'#(% %2 %4)
#()
'()
'() '() '() '() '() '() '() '() '() '() '() '() '()
(range 10)
(set 2)
(def s (partial (apply (partial conj []))))
(doc apply)
(doc partial)
(f 52)
(apply f [52])
(f (f 4))
(f 24)
'(f 52)
*1
(eval *1)
+'
+
+'
*'
'#(%)
#(%)
'#(%)
'#(#())
'(fn [] #())
'(fn [] (fn [] #()))
(fn [n] (fn [n] n) n)
*1 2
 (Long/MAX_VALUE)
(+ Long/MAX_VALUE 1)
(+' Long/MAX_VALUE 1)
(class 1)
Long/MAX_VALUE
(class 1)/MAX_VALUE
'#()
(repeat 9)
(take 2 (repeat 9))
(fn [coll n]
  (loop [acc []
         [head & tail] coll
         c n]
    (if (zero? c)
      (recur acc tail n)
      (recur (conj acc head) tail (dec c)))))
(def d *1)
((fn [coll n]
  (loop [acc []
         [head & tail] coll
         c n]
    (if (zero? c)
      (recur acc tail n)
      (recur (conj acc head) tail (dec c)))))
(= (d [1 2 3 4 5 6] 4) [1 2 3 5 6])
(fn [coll n]
  (loop [acc []
         [head & tail] coll
         c n]
    (if (zero? c)
      (recur acc tail n)
      (recur (conj acc head) tail (dec c)))))
(def a *1)
(a [1 2 3 4 5 6] 2)
(conj [1] [2])
(into [1] [2])
(seq [1])
(seq? [1])
(doc seq?)
(coll? [1])
(coll? [])
(coll? {})
(length [1])
(size [2])
(len [2])
(count [2])
(fn? 2)
(fn? {:a 3})
(fn? #())
(type #())
(type type)
(defn t #(* % % %))
(def t #(* % % %))
(t 8)
(t (t (t (t (t (t (t 9)
))))))
(t (t (t (t (t (t (t 9N)))))))
(def km 43)
km
(def price-ltr 2.30)
price-ltr
(def km-ltr 12.3)
(/ km km-ltr)
(* price-ltr (/ km km-ltr))
(:a {})
(:a nil)
(nil :a)
({:a 1 :b 2} :b)
(:b {:a 1 :b 2})
({} :a)
(/ 1 3)
(float (/ 1 3))
(+ 0.1 0.1 0.1 0.1 0.1)
(+ 0.000000001 0.9)
(defn f [n] (apply * (range n)))
(f 52)
(defn f [n] (apply *' (range 1 (inc n))))
(f 52)
(f 25)
(f 52)
(take 5 (iterate [5]))
(take 5 (iterate 5))
(doc iterate)
(take 5 (iterate #(conj [] %) 5))
(take 5 (iterate #(into [] %) 5))
(take 5 (iterate #(into [] [%]) 5))
(take 5 (cycle 5))
(take 5 (cycle [5]))
(defn pow [n p] (reduce *' (take p (cycle [n]))))
(pow 5 3)
(pow 5 10)
(pow 10 10)
(pow (pow 10 10) 10)
(doc condp)
(take 5 (repeat 5))
(defn pow [n p] (apply *' (take p (repeat n))))
(pow 5 5)
(pow 5 3)
